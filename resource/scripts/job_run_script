#!/bin/sh
#
# R run script. See also job_check_limits_script and README.
#
echo $$ > LGI_running

[ "${MODULENAME}" ] || MODULENAME=r

# locate R
Rprog=
R --version >/dev/null 2>&1 && Rprog=R
# but maybe we need to load a module first
if [ ! "${Rprog}" ] && module --version 2>&1|grep -q ^VERSION; then
	module load "${MODULENAME}"
	R --version >/dev/null 2>&1 && Rprog=R
fi

if [ ! "${Rprog}" ]; then
	# No R. Shouldn't happen since job_check_limits_script should have
	#   checked this already.
	echo "Error: R not found; strange since check_limits already checked this. Please contact the Rlgi developers." >/dev/stderr
	exit 2
fi

# setup R configuration
cat >LGI_Rprofile_user <<EOF
# to avoid the mirror selection dialog, specify a sensible mirror!
#   full list at http://cran.r-project.org/mirrors.html
local({r <- getOption("repos"); r["CRAN"] <- "http://cran-mirror.cs.uu.nl/"; options(repos=r)})
# read original profile, if any
if ("$R_PROFILE_USER"!="" && "$R_PROFILE_USER"!="`pwd`/LGI_Rprofile_user") {
  source("$R_PROFILE_USER", TRUE)
} else if (file.exists("$HOME/.Rprofile")) {
  source("$HOME/.Rprofile", TRUE)
}
EOF
R_PROFILE_USER=`pwd`/LGI_Rprofile_user
export R_PROFILE_USER

# use temporary library path for local package installation
mkdir -p `pwd`/LGI_Rlibs_user
R_LIBS_USER="`pwd`/LGI_Rlibs_user:$R_LIBS_USER"
export R_LIBS_USER

# and run R
"${Rprog}" -q --no-save <LGI_input >LGI_output 2>&1

touch LGI_finished
rm LGI_running
